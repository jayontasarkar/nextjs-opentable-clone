// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Restaurant Model
model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String
  main_image  String
  images      String[]
  description String
  open_time   String
  close_time  String
  slug        String    @unique
  price       PRICE
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  items       Item[]
  Location    Location? @relation(fields: [location_id], references: [id])
  location_id Int?
  Cuisine     Cuisine?  @relation(fields: [cuisine_id], references: [id])
  cuisine_id  Int?
  Rating      Rating[]
  Booking     Booking[]
  Table       Table[]
}

// Item model
model Item {
  id            Int        @id @default(autoincrement())
  name          String
  price         String
  description   String
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

// Location model
model Location {
  id         Int          @id @default(autoincrement())
  name       String
  restaurant Restaurant[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

// Location model
model Cuisine {
  id         Int          @id @default(autoincrement())
  name       String
  restaurant Restaurant[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

// User model
model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  email      String   @unique
  password   String
  city       String
  phone      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Rating     Rating[]
}

// Rating model
model Rating {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String
  rating        Float
  text          String
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

// Booking model
model Booking {
  id                Int                @id @default(autoincrement())
  number_of_people  Int
  booking_time      DateTime
  booking_email     String
  booker_phone      String
  booker_first_name String
  booker_last_name  String
  booker_occeasion  String
  booker_request    String
  restaurant_id     Int
  restaurant        Restaurant         @relation(fields: [restaurant_id], references: [id])
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  tables            BookingsOnTables[]
}

model Table {
  id            Int                @id @default(autoincrement())
  seats         Int
  restaurant_id Int
  restaurant    Restaurant         @relation(fields: [restaurant_id], references: [id])
  bookings      BookingsOnTables[]
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
}

model BookingsOnTables {
  booking_id Int
  booking    Booking  @relation(fields: [booking_id], references: [id])
  table_id   Int
  table      Table    @relation(fields: [table_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([booking_id, table_id])
}

// Price Enum
enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}
